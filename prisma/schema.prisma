datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  email                 String          @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  // Optional for WebAuthn support
  Authenticator         Authenticator[]
  registrations         Registration[]
  verifiedRegistrations Registration[]  @relation("VerifiedRegistrations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Registration {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  collegeName       String
  eventType         EventType
  paymentScreenshot String
  status            RegistrationStatus @default(PENDING)
  paymentStatus     PaymentStatus      @default(PENDING)
  amount            Float              @default(0)
  registrationDate  DateTime           @default(now())
  paymentMode       String             @default("ONLINE")
  department        String             @default("UNASSIGNED")
  class             String             @default("YEAR_NOT_SET")

  studentName   String?
  contactNumber String?
  email         String?

  startupCategory     String?
  numberOfTeamMembers Int?
  teamName            String?
  teamLeader          TeamMember?  @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  teamLeaderId        String?      @unique
  teamMembers         TeamMember[] @relation("TeamMembers")

  squadName String?
  players   Player[]

  // relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  verifiedBy   User?     @relation("VerifiedRegistrations", fields: [verifiedById], references: [id])
  verifiedById String?
  verifiedAt   DateTime?
  notes        String?

  @@index([eventType])
  @@index([status])
  @@index([paymentStatus])
  @@index([registrationDate])
  @@index([userId])
}

// only create these records for team-based events
model TeamMember {
  id            String   @id @default(cuid())
  studentName   String
  contactNumber String
  email         String
  createdAt     DateTime @default(now())

  registrationAsLeader Registration? @relation("TeamLeader")
  registrationAsMember Registration? @relation("TeamMembers", fields: [registrationId], references: [id])
  registrationId       String?

  @@index([registrationId])
}

// create these records only for FireFire Battleship
model Player {
  id            String   @id @default(cuid())
  playerName    String
  freeFireId    String
  contactNumber String
  createdAt     DateTime @default(now())

  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  registrationId String

  @@index([registrationId])
}

enum EventType {
  STARTUP_SPHERE
  FACE_TO_FACE
  PYTHON_WARRIORS
  FREEFIRE_BATTLESHIP
  AI_TALES
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Admin {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String // Hashed password
  name      String
  role      AdminRole  @default(EVENT_ADMIN)
  eventType EventType? // null for SUPER_ADMIN
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum AdminRole {
  SUPER_ADMIN
  EVENT_ADMIN
}
